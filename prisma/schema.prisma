// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FULFILLED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  REFUNDED
}

model Product {
  id             String      @id @default(cuid())
  sku            String      @unique
  name           String
  category       String
  brand          String?
  image          String?
  actualPrice    Float
  sellingPrice   Float
  jumiaPrice     Float?
  profitMargin   Float?
  inStock        Boolean     @default(true)
  stockQuantity  Int         @default(0)
  minStockLevel  Int         @default(5)
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  orders         OrderItem[]

  @@index([category])
  @@index([name])
}

model Shop {
  id         String      @id @default(cuid())
  name       String
  location   String
  phone      String?
  email      String?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  attendants Attendant[]
  orders     Order[]

  @@unique([name, location], name: "name_location")
}

model Attendant {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  lastLoginAt DateTime?

  @@index([shopId])
  @@index([email])
}

model Order {
  id             String        @id @default(cuid())
  orderNumber    String        @unique
  customerId     String?
  customerName   String
  customerPhone  String?
  customerEmail  String?
  shopId         String
  shop           Shop          @relation(fields: [shopId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  attendantId    String?
  attendant      Attendant?    @relation(fields: [attendantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  status         OrderStatus   @default(PENDING)
  totalAmount    Float
  paidAmount     Float         @default(0)
  paymentStatus  PaymentStatus @default(UNPAID)
  paymentMethod  String?
  notes          String?
  deliveryAddress String?
  deliveryDate   DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  items          OrderItem[]

  @@index([shopId])
  @@index([attendantId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  quantity   Int
  price      Float   // unit price used in the order at the time
  subtotal   Float

  @@index([orderId])
  @@index([productId])
}
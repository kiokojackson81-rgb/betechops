// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPERVISOR
  ATTENDANT
}

enum OrderStatus {
  PENDING
  PROCESSING
  FULFILLED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(ATTENDANT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // many-to-many: what shops an attendant/supervisor manages
  managedShops Shop[] @relation("ManagedBy")

  // relations
  orders Order[]
  attendantCommissions AttendantCommission[]
}

model Shop {
  id        String   @id @default(cuid())
  name      String
  location  String?
  phone     String?
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // manager assignments
  managers User[] @relation("ManagedBy")

  // Jumia API credentials for this shop (optional)
  apiConfig ShopApiConfig?

  // relations
  orders Order[]
  attendantCommissions AttendantCommission[]
}

model ShopApiConfig {
  id        String   @id @default(cuid())
  shopId    String   @unique
  platform  String   @default("JUMIA")
  apiKey    String
  apiSecret String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop Shop @relation(fields: [shopId], references: [id])
}

model Product {
  id              String  @id @default(cuid())
  sku             String  @unique
  name            String
  category        String
  sellingPrice    Float
  lastBuyingPrice Float?
  minStockLevel   Int      @default(5)
  stockQuantity   Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  orders OrderItem[]
}

model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique
  customerName  String
  shopId        String
  attendantId   String?
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  paidAmount    Float      @default(0)
  paymentStatus PaymentStatus @default(UNPAID)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  shop      Shop     @relation(fields: [shopId], references: [id])
  attendant User?    @relation(fields: [attendantId], references: [id])
  items     OrderItem[]
}
model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  productId    String
  quantity     Int
  sellingPrice Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

/// Commission configuration and snapshots
model CommissionPeriod {
  id        String   @id @default(cuid())
  name      String                    // e.g., "Aug 24 â†’ Sep 24"
  startDate DateTime
  endDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  tiers CommissionTier[]
  attendantCommissions AttendantCommission[]
}

model CommissionTier {
  id         String   @id @default(cuid())
  periodId   String
  minSales   Float    // inclusive
  maxSales   Float    // inclusive
  payoutFlat Float    // flat KES payout for hitting a band

  period CommissionPeriod @relation(fields: [periodId], references: [id])
}

model AttendantCommission {
  id        String   @id @default(cuid())
  userId    String
  periodId  String
  shopId    String?     // null means aggregate across assigned shops
  sales     Float
  payout    Float
  computedAt DateTime   @default(now())

  user   User             @relation(fields: [userId], references: [id])
  period CommissionPeriod @relation(fields: [periodId], references: [id])
  shop   Shop?            @relation(fields: [shopId], references: [id])
}
